#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –∏–∑ –ë–∏—Ç—Ä–∏–∫—Å24 —á–µ—Ä–µ–∑ REST API
"""

import requests
import json
import time
from typing import List, Dict, Optional
from datetime import datetime
import csv
import re

class WazzupAPIClient:
    def __init__(self, api_key: str, base_url: str = "https://api.wazzup24.com/v3", disable_proxy: bool = True):
        """
        –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Wazzup API
        
        Args:
            api_key: API –∫–ª—é—á –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            base_url: –ë–∞–∑–æ–≤—ã–π URL API (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é v3)
            disable_proxy: –û—Ç–∫–ª—é—á–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
        """
        self.api_key = api_key
        self.base_url = base_url.rstrip('/')
        self.session = requests.Session()
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if disable_proxy:
            self.session.proxies = {
                'http': None,
                'https': None,
            }
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        self.session.headers.update({
            'Authorization': f'Bearer {api_key}',
            'Content-Type': 'application/json',
            'User-Agent': 'Bitrix24-Wazzup-Exporter/1.0'
        })
    
    def make_request(self, endpoint: str, method: str = 'GET', params: Dict = None, data: Dict = None) -> Dict:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ Wazzup API
        
        Args:
            endpoint: –≠–Ω–¥–ø–æ–∏–Ω—Ç API (–±–µ–∑ –±–∞–∑–æ–≤–æ–≥–æ URL)
            method: HTTP –º–µ—Ç–æ–¥ (GET, POST, etc.)
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ (–¥–ª—è GET)
            data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–¥–ª—è POST/PUT)
        
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç API –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
        """
        url = f"{self.base_url}/{endpoint.lstrip('/')}"
        
        try:
            print(f"üîó Wazzup API: {method} {endpoint}")
            
            if method.upper() == 'GET':
                response = self.session.get(url, params=params, timeout=30)
            elif method.upper() == 'POST':
                response = self.session.post(url, json=data, params=params, timeout=30)
            elif method.upper() == 'PUT':
                response = self.session.put(url, json=data, params=params, timeout=30)
            elif method.upper() == 'DELETE':
                response = self.session.delete(url, params=params, timeout=30)
            else:
                raise ValueError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π HTTP –º–µ—Ç–æ–¥: {method}")
            
            response.raise_for_status()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç JSON
            if response.headers.get('content-type', '').startswith('application/json'):
                result = response.json()
                print(f"‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return result
            else:
                print(f"‚ö†Ô∏è –û—Ç–≤–µ—Ç –Ω–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON: {response.text[:200]}...")
                return {'text': response.text, 'status_code': response.status_code}
                
        except requests.exceptions.RequestException as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Wazzup API: {e}")
            return {'error': str(e)}
        except json.JSONDecodeError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
            return {'error': f'JSON decode error: {e}', 'text': response.text[:500]}
    
    def get_contacts(self, limit: int = 100, offset: int = 0) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        
        Args:
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∑–∞ –∑–∞–ø—Ä–æ—Å
            offset: –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        """
        params = {
            'limit': limit,
            'offset': offset
        }
        
        result = self.make_request('contacts', params=params)
        
        if 'error' in result:
            return []
        
        # –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–µ—Å—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        return result.get('data', result) if isinstance(result, dict) else result
    
    def get_channels(self) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ (Telegram, WhatsApp –∏ —Ç.–¥.)
        
        Returns:
            –°–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤
        """
        result = self.make_request('channels')
        
        if 'error' in result:
            return []
            
        return result.get('data', result) if isinstance(result, dict) else result
    
    def get_deals(self, limit: int = 100, offset: int = 0) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–¥–µ–ª–æ–∫
        
        Args:
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫ –∑–∞ –∑–∞–ø—Ä–æ—Å
            offset: –°–º–µ—â–µ–Ω–∏–µ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–¥–µ–ª–æ–∫
        """
        params = {
            'limit': limit,
            'offset': offset
        }
        
        result = self.make_request('deals', params=params)
        
        if 'error' in result:
            return []
            
        return result.get('data', result) if isinstance(result, dict) else result
    
    def get_messages_for_contact(self, contact_id: str, limit: int = 100) -> List[Dict]:
        """
        –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
        –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: Wazzup API –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø—Ä—è–º–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        
        Args:
            contact_id: ID –∫–æ–Ω—Ç–∞–∫—Ç–∞
            limit: –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è)
        """
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
        possible_endpoints = [
            f'contacts/{contact_id}/messages',
            f'messages/{contact_id}',
            f'dialogs/{contact_id}/messages',
            f'chats/{contact_id}/messages'
        ]
        
        for endpoint in possible_endpoints:
            print(f"üîç –ü—Ä–æ–±—É–µ–º —ç–Ω–¥–ø–æ–∏–Ω—Ç: {endpoint}")
            result = self.make_request(endpoint, params={'limit': limit})
            
            if 'error' not in result and result:
                print(f"‚úÖ –ù–∞–π–¥–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑: {endpoint}")
                return result.get('data', result) if isinstance(result, dict) else result
        
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á–∏–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π")
        return []
    
    def test_connection(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Wazzup API
        
        Returns:
            True –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        print("üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Wazzup API...")
        
        # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∫–∞–Ω–∞–ª—ã - —ç—Ç–æ –±–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥
        result = self.make_request('channels')
        
        if 'error' not in result:
            print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Wazzup API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Wazzup API: {result.get('error')}")
            return False

class Bitrix24ChatExporter:
    def __init__(self, webhook_url: str, disable_proxy: bool = True, verify_ssl: bool = True):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å URL –≤–µ–±—Ö—É–∫–∞
        
        Args:
            webhook_url: URL –≤—Ö–æ–¥—è—â–µ–≥–æ –≤–µ–±—Ö—É–∫–∞ (https://–≤–∞—à_–¥–æ–º–µ–Ω.bitrix24.ru/rest/user_id/webhook_code/)
            disable_proxy: –û—Ç–∫–ª—é—á–∏—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
            verify_ssl: –ü—Ä–æ–≤–µ—Ä—è—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
        """
        self.webhook_url = webhook_url.rstrip('/')
        self.verify_ssl = verify_ssl
        self.session = requests.Session()
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if disable_proxy:
            self.session.proxies = {
                'http': None,
                'https': None,
            }
        
        self.session.headers.update({
            'Content-Type': 'application/json',
            'User-Agent': 'Bitrix24ChatExporter/1.0'
        })
        
        # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è SSL –µ—Å–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
        if not verify_ssl:
            import urllib3
            urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
    
    def make_request(self, method: str, params: Dict = None) -> Dict:
        """
        –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –∫ API –ë–∏—Ç—Ä–∏–∫—Å24
        
        Args:
            method: –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Ç–æ–¥–∞ API
            params: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        
        Returns:
            –û—Ç–≤–µ—Ç –æ—Ç API
        """
        url = f"{self.webhook_url}/{method}"
        
        try:
            print(f"–í—ã–ø–æ–ª–Ω—è—é –∑–∞–ø—Ä–æ—Å: {method}")
            
            if params:
                response = self.session.post(url, json=params, verify=self.verify_ssl, timeout=30)
            else:
                response = self.session.get(url, verify=self.verify_ssl, timeout=30)
            
            response.raise_for_status()
            result = response.json()
            
            if 'error' in result:
                print(f"–û—à–∏–±–∫–∞ API: {result['error']} - {result.get('error_description', '')}")
                return {}
            
            print(f"–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            return result
            
        except requests.exceptions.ProxyError as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏: {e}")
            print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–≥–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
            return {}
        except requests.exceptions.SSLError as e:
            print(f"–û—à–∏–±–∫–∞ SSL: {e}")
            print("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤")
            return {}
        except requests.exceptions.Timeout as e:
            print(f"–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return {}
        except requests.exceptions.RequestException as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return {}
        except json.JSONDecodeError as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–∞–∑–±–æ—Ä–∞ JSON: {e}")
            print(f"–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response.text[:500]}")
            return {}
    
    def test_connection(self) -> bool:
        """
        –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å API
        
        Returns:
            True –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        print("–¢–µ—Å—Ç–∏—Ä—É—é —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–∏—Ç—Ä–∏–∫—Å24...")
        
        # –ü—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API
        result = self.make_request('profile')  # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        if result and 'result' in result:
            print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            user_info = result['result']
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info.get('NAME', '')} {user_info.get('LAST_NAME', '')}")
            return True
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
            return False
    
    def get_users_info(self) -> Dict:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö {user_id: user_data}
        """
        print("–ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö...")
        
        result = self.make_request('user.get')
        
        users_dict = {}
        if result and 'result' in result:
            users = result['result']
            for user in users:
                user_id = str(user.get('ID'))
                users_dict[user_id] = {
                    'ID': user.get('ID'),
                    'NAME': user.get('NAME', ''),
                    'LAST_NAME': user.get('LAST_NAME', ''),
                    'EMAIL': user.get('EMAIL', ''),
                    'WORK_POSITION': user.get('WORK_POSITION', ''),
                    'ACTIVE': user.get('ACTIVE', 'Y')
                }
            print(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users_dict)}")
        
        return users_dict
    
    def get_all_dialogs(self, filter_messenger_only: bool = False) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        
        Args:
            filter_messenger_only: –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–∏–∞–ª–æ–≥–∏ –∏–∑ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–æ–≤ (Wazzup)
        
        Returns:
            –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤
        """
        print("–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤...")
        all_dialogs = []
        start = 0
        limit = 50  # –ú–∞–∫—Å–∏–º—É–º 50 –∑–∞ –∑–∞–ø—Ä–æ—Å
        
        while True:
            print(f"–ó–∞–≥—Ä—É–∂–∞—é –¥–∏–∞–ª–æ–≥–∏: start={start}")
            
            params = {
                'start': start,
            }
            
            result = self.make_request('im.recent.list', params)
            
            if not result or 'result' not in result:
                break
            
            dialogs = result['result'].get('items', [])
            
            if not dialogs:
                break
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–∏–∞–ª–æ–≥–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if filter_messenger_only:
                filtered_dialogs = []
                for dialog in dialogs:
                    if self.is_messenger_dialog(dialog):
                        filtered_dialogs.append(dialog)
                        print(f"‚úÖ –ù–∞–π–¥–µ–Ω –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä –¥–∏–∞–ª–æ–≥: {dialog.get('title')}")
                    else:
                        print(f"‚ùå –ü—Ä–æ–ø—É—Å–∫–∞—é –¥–∏–∞–ª–æ–≥: {dialog.get('title')} (—Ç–∏–ø: {dialog.get('type')})")
                dialogs = filtered_dialogs
            
            all_dialogs.extend(dialogs)
            print(f"–ü–æ–ª—É—á–µ–Ω–æ –¥–∏–∞–ª–æ–≥–æ–≤: {len(dialogs)}, –≤—Å–µ–≥–æ: {len(all_dialogs)}")
            
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ –ª–∏–º–∏—Ç–∞, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            if len(dialogs) < limit:
                break
            
            start += limit
            time.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –¥–∏–∞–ª–æ–≥–æ–≤: {len(all_dialogs)}")
        return all_dialogs
    
    def is_messenger_dialog(self, dialog: Dict) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∏–∞–ª–æ–≥ –¥–∏–∞–ª–æ–≥–æ–º –∏–∑ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞ (Wazzup)
        
        Args:
            dialog: –î–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∞
        
        Returns:
            True –µ—Å–ª–∏ —ç—Ç–æ –¥–∏–∞–ª–æ–≥ –∏–∑ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∏–∞–ª–æ–≥–∞ - –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã –æ–±—ã—á–Ω–æ –∏–º–µ—é—Ç —Ç–∏–ø "user"
        if dialog.get('type') != 'user':
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = dialog.get('user', {})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –±–æ—Ç (–º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è)
        if not user_info.get('bot', False):
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º bot_data –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è Wazzup
        bot_data = user_info.get('bot_data', {})
        
        # Wazzup –∏–º–µ–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–π app_id
        wazzup_app_id = "app.5a8d2732b3d737.64069747"
        if bot_data.get('app_id') == wazzup_app_id:
            return True
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ work_position –∏ –Ω–∞–∑–≤–∞–Ω–∏—é
        work_position = user_info.get('work_position', '')
        name = user_info.get('name', '')
        
        # Wazzup –æ–±—ã—á–Ω–æ –∏–º–µ–µ—Ç work_position = "–ß–∞—Ç-–±–æ—Ç" –∏ name = "Wazzup"
        if work_position == '–ß–∞—Ç-–±–æ—Ç' and 'wazzup' in name.lower():
            return True
        
        return False
    
    def extract_wazzup_chat_ids_from_notifications(self) -> List[str]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID —á–∞—Ç–æ–≤ Wazzup –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        
        Returns:
            –°–ø–∏—Å–æ–∫ ID —á–∞—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        print("–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ ID —á–∞—Ç–æ–≤ Wazzup –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
        chat_ids = set()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏
        all_dialogs = self.get_all_dialogs(filter_messenger_only=False)
        
        for dialog in all_dialogs:
            dialog_id = dialog.get('id')
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥–∏–∞–ª–æ–≥–∞
            params = {'DIALOG_ID': dialog_id, 'LIMIT': 50}
            result = self.make_request('im.dialog.messages.get', params)
            
            if result and 'result' in result:
                messages = result['result'].get('messages', [])
                
                for msg in messages:
                    text = msg.get('text', '')
                    
                    # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ Wazzup —á–∞—Ç—ã –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö
                    if 'integrations.wazzup24.com/bitrix/chat/' in text:
                        import re
                        # –ò—â–µ–º ID –≤ –∫–æ–Ω—Ü–µ URL: /chat/hash/user_id/contact_id
                        pattern = r'integrations\.wazzup24\.com/bitrix/chat/[a-f0-9]+/\d+/(\d+)'
                        matches = re.findall(pattern, text)
                        for contact_id in matches:
                            chat_ids.add(contact_id)
                            print(f"–ù–∞–π–¥–µ–Ω ID –∫–æ–Ω—Ç–∞–∫—Ç–∞: {contact_id}")
        
        print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(chat_ids)}")
        return list(chat_ids)
    
    def get_wazzup_dialog_messages(self, contact_id: str, limit: int = 100) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Wazzup –¥–∏–∞–ª–æ–≥–∞ –ø–æ ID –∫–æ–Ω—Ç–∞–∫—Ç–∞
        
        Args:
            contact_id: ID –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–∑ Wazzup
            limit: –õ–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        """
        print(f"–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞ {contact_id}...")
        
        # –ü–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã ID –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
        possible_dialog_ids = [
            contact_id,  # –ü—Ä—è–º–æ–π ID
            f"chat{contact_id}",  # Chat + ID
            f"openline{contact_id}",  # Openline + ID
            f"ol{contact_id}",  # Openline –∫–æ—Ä–æ—Ç–∫–∏–π
        ]
        
        all_messages = []
        
        for dialog_id in possible_dialog_ids:
            params = {'DIALOG_ID': dialog_id, 'LIMIT': limit}
            result = self.make_request('im.dialog.messages.get', params)
            
            if result and 'result' in result:
                messages = result['result'].get('messages', [])
                if messages:
                    print(f"–ù–∞–π–¥–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –¥–∏–∞–ª–æ–≥–µ {dialog_id}: {len(messages)}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    for i, msg in enumerate(messages, 1):
                        text = msg.get('text', '')
                        author_id = msg.get('author_id', 0)
                        print(f"  {i}. –ê–≤—Ç–æ—Ä {author_id}: {text[:100]}...")
                    
                    # –ë–æ–ª–µ–µ –º—è–≥–∫–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è - –≤–∫–ª—é—á–∞–µ–º –±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π
                    user_messages = []
                    for msg in messages:
                        text = msg.get('text', '')
                        author_id = msg.get('author_id', 0)
                        
                        # –í–∫–ª—é—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º (–∏—Å–∫–ª—é—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—É—Å—Ç—ã–µ)
                        if text.strip() and author_id != 0:
                            user_messages.append(msg)
                    
                    if user_messages:
                        print(f"–ù–∞–π–¥–µ–Ω–æ {len(user_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º")
                        all_messages.extend(user_messages)
                        break  # –ù–∞—à–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        
        return all_messages
    
    def get_dialog_messages(self, dialog_id: str, limit: int = 100, debug: bool = False) -> List[Dict]:
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –¥–∏–∞–ª–æ–≥–∞
        
        Args:
            dialog_id: ID –¥–∏–∞–ª–æ–≥–∞
            limit: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
            debug: –í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        all_messages = []
        last_id = None
        
        while True:
            params = {
                'DIALOG_ID': dialog_id,
                'LIMIT': limit
            }
            
            if last_id:
                params['LAST_ID'] = last_id
            
            result = self.make_request('im.dialog.messages.get', params)
            
            if not result or 'result' not in result:
                break
            
            messages = result['result'].get('messages', [])
            
            if debug:
                print(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ API: {len(messages)}")
                if messages:
                    print("–ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–ø—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã):")
                    print(json.dumps(messages[0], indent=2, ensure_ascii=False))
            
            if not messages:
                break
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è: –∏—Å–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            filtered_messages = []
            for msg in messages:
                text = msg.get('text', '')
                author_id = msg.get('author_id', 0)
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–∏—Å—Ç–µ–º—ã (author_id = 0)
                if author_id == 0:
                    if debug:
                        print(f"–ü—Ä–æ–ø—É—Å–∫–∞—é —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {text[:100]}...")
                    continue
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å URL-—Ä–∞–∑–º–µ—Ç–∫–æ–π (—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è)
                if '[URL=' in text and ']' in text:
                    if debug:
                        print(f"–ü—Ä–æ–ø—É—Å–∫–∞—é —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {text[:100]}...")
                    continue
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ CRM (–º–æ–≥—É—Ç –±—ã—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏)
                if 'bitrix24.ru/crm/' in text:
                    if debug:
                        print(f"–ü—Ä–æ–ø—É—Å–∫–∞—é CRM —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {text[:100]}...")
                    continue
                
                # –ü—Ä–æ–ø—É—Å–∫–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–∏–ø–æ–≤—ã–º–∏ —à–∞–±–ª–æ–Ω–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
                if any(phrase in text for phrase in [
                    '–Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∏–∑', 
                    '–û—Ç–≤–µ—Ç–∏—Ç—å –≤', 
                    '–Ω–∞ –∫–∞–Ω–∞–ª',
                    '–°–¥–µ–ª–∫–∞ –ø–æ –æ–±—Ä–∞—â–µ–Ω–∏—é'
                ]):
                    if debug:
                        print(f"–ü—Ä–æ–ø—É—Å–∫–∞—é —à–∞–±–ª–æ–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {text[:100]}...")
                    continue
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if not text.strip():
                    continue
                
                # –≠—Ç–æ –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –Ω–∞—Å—Ç–æ—è—â–µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if debug:
                    print(f"‚úÖ –î–æ–±–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {author_id}: {text[:50]}...")
                
                filtered_messages.append(msg)
            
            if debug:
                print(f"–ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(filtered_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            all_messages.extend(filtered_messages)
            
            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
            if messages:
                last_id = min(msg['id'] for msg in messages)
            
            # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –º–µ–Ω—å—à–µ –ª–∏–º–∏—Ç–∞, –∑–Ω–∞—á–∏—Ç —ç—Ç–æ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if len(messages) < limit:
                break
            
            time.sleep(0.3)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        return all_messages
    
    def export_all_dialogs(self, output_file: str = 'bitrix24_dialogs.json', 
                          include_messages: bool = True, max_messages_per_dialog: int = 1000,
                          messenger_only: bool = False):
        """
        –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª
        
        Args:
            output_file: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            include_messages: –í–∫–ª—é—á–∞—Ç—å –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            max_messages_per_dialog: –ú–∞–∫—Å–∏–º—É–º —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –¥–∏–∞–ª–æ–≥
            messenger_only: –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–∏–∞–ª–æ–≥–∏ –∏–∑ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–æ–≤ (Wazzup)
        """
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏
        dialogs = self.get_all_dialogs(filter_messenger_only=messenger_only)
        
        if not dialogs:
            print("–î–∏–∞–ª–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        export_data = {
            'export_date': datetime.now().isoformat(),
            'total_dialogs': len(dialogs),
            'dialogs': []
        }
        
        for i, dialog in enumerate(dialogs, 1):
            print(f"\n–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∏–∞–ª–æ–≥ {i}/{len(dialogs)}: {dialog.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            
            dialog_data = {
                'id': dialog.get('id'),
                'type': dialog.get('type'),
                'title': dialog.get('title'),
                'avatar': dialog.get('avatar', {}).get('url'),
                'last_activity': dialog.get('date_last_activity'),
                'unread_count': dialog.get('counter'),
            }
            
            if include_messages:
                print(f"–ó–∞–≥—Ä—É–∂–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞: {dialog.get('id')}")
                messages = self.get_dialog_messages(dialog.get('id'), min(100, max_messages_per_dialog))
                dialog_data['messages'] = messages[:max_messages_per_dialog]
                dialog_data['messages_count'] = len(messages)
                print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
            
            export_data['dialogs'].append(dialog_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(export_data, f, ensure_ascii=False, indent=2)
        
        print(f"\n–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_file}")
        return export_data
    
    def export_to_csv(self, output_file: str = 'bitrix24_dialogs.csv', messenger_only: bool = False):
        """
        –≠–∫—Å–ø–æ—Ä—Ç –¥–∏–∞–ª–æ–≥–æ–≤ –≤ CSV (–±–µ–∑ —Å–æ–æ–±—â–µ–Ω–∏–π)
        
        Args:
            output_file: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            messenger_only: –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–∏–∞–ª–æ–≥–∏ –∏–∑ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–æ–≤ (Wazzup)
        """
        dialogs = self.get_all_dialogs(filter_messenger_only=messenger_only)
        
        if not dialogs:
            print("–î–∏–∞–ª–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        with open(output_file, 'w', newline='', encoding='utf-8') as csvfile:
            fieldnames = ['id', 'type', 'title', 'last_activity', 'unread_count', 'avatar_url']
            writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
            writer.writeheader()
            
            for dialog in dialogs:
                writer.writerow({
                    'id': dialog.get('id'),
                    'type': dialog.get('type'),
                    'title': dialog.get('title'),
                    'last_activity': dialog.get('date_last_activity'),
                    'unread_count': dialog.get('counter', 0),
                    'avatar_url': dialog.get('avatar', {}).get('url', '')
                })
        
        print(f"CSV —ç–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {output_file}")

def debug_single_dialog():
    """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π"""
    WEBHOOK_URL = "https://b24-mwh5lj.bitrix24.ru/rest/1/vhbpg01ls83dn4rq/"
    
    print("=== –û—Ç–ª–∞–¥–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∏–∞–ª–æ–≥–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π ===\n")
    
    exporter = Bitrix24ChatExporter(WEBHOOK_URL, disable_proxy=True, verify_ssl=True)
    
    if not exporter.test_connection():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
    users_info = exporter.get_users_info()
    
    # –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ò–∑–≤–ª–µ–∫–∞–µ–º ID —á–∞—Ç–æ–≤ –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Wazzup
    print("\n=== –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —á–∞—Ç–æ–≤ Wazzup ===")
    chat_ids = exporter.extract_wazzup_chat_ids_from_notifications()
    
    if not chat_ids:
        print("–ù–µ –Ω–∞–π–¥–µ–Ω—ã ID —á–∞—Ç–æ–≤ Wazzup")
        return
    
    print(f"–ù–∞–π–¥–µ–Ω–æ ID —á–∞—Ç–æ–≤: {chat_ids}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
    all_real_messages = []
    chat_data = {}
    
    for chat_id in chat_ids:
        print(f"\n--- –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Ç {chat_id} ---")
        messages = exporter.get_wazzup_dialog_messages(chat_id, limit=50)
        
        if messages:
            all_real_messages.extend(messages)
            chat_data[chat_id] = {
                'total_messages': len(messages),
                'messages': messages
            }
            
            print(f"–ü—Ä–∏–º–µ—Ä—ã —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ —á–∞—Ç–∞ {chat_id}:")
            for i, msg in enumerate(messages[:3], 1):
                text = msg.get('text', '')
                author_id = msg.get('author_id')
                print(f"  {i}. –ê–≤—Ç–æ—Ä {author_id}: {text[:80]}...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ '—Ç–µ—Å—Ç' –∏ '—Ç–æ—Å—Ç'
                if '—Ç–µ—Å—Ç' in text.lower() or '—Ç–æ—Å—Ç' in text.lower():
                    print(f"  *** –ù–ê–ô–î–ï–ù–û '—Ç–µ—Å—Ç/—Ç–æ—Å—Ç' –≤ —á–∞—Ç–µ {chat_id}: {text}")
    
    print(f"\n=== –ò–¢–û–ì–ò ===")
    print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {len(all_real_messages)}")
    print(f"–ß–∞—Ç–æ–≤ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏: {len(chat_data)}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ—Ç–ª–∞–¥–æ—á–Ω—ã–π —Ñ–∞–π–ª
    debug_data = {
        'total_chats': len(chat_ids),
        'chat_ids': chat_ids,
        'total_real_messages': len(all_real_messages),
        'chat_data': chat_data,
        'users_info': users_info
    }
    
    with open('bitrix24_dialogs_wazzup_debug.json', 'w', encoding='utf-8') as f:
        json.dump(debug_data, f, ensure_ascii=False, indent=2)
    
    print(f"–û—Ç–ª–∞–¥–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: bitrix24_dialogs_wazzup_debug.json")

def find_messenger_messages():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Telegram/WhatsApp"""
    WEBHOOK_URL = "https://b24-mwh5lj.bitrix24.ru/rest/1/vhbpg01ls83dn4rq/"
    
    print("=== –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–æ–≤ ===\n")
    
    exporter = Bitrix24ChatExporter(WEBHOOK_URL, disable_proxy=True, verify_ssl=True)
    
    if not exporter.test_connection():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –í–°–ï –¥–∏–∞–ª–æ–≥–∏ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    print("–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤...")
    all_dialogs = exporter.get_all_dialogs(filter_messenger_only=False)
    
    print(f"–ù–∞–π–¥–µ–Ω–æ –¥–∏–∞–ª–æ–≥–æ–≤: {len(all_dialogs)}")
    
    # –î–µ—Ç–∞–ª—å–Ω–æ –∏–∑—É—á–∞–µ–º –∫–∞–∂–¥—ã–π –¥–∏–∞–ª–æ–≥
    messenger_messages = []
    
    for i, dialog in enumerate(all_dialogs, 1):
        dialog_id = dialog.get('id')
        dialog_title = dialog.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
        dialog_type = dialog.get('type')
        
        print(f"\n--- –î–∏–∞–ª–æ–≥ {i}: {dialog_title} (ID: {dialog_id}, —Ç–∏–ø: {dialog_type}) ---")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è
        if 'user' in dialog:
            user_info = dialog['user']
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_info.get('name', 'N/A')}")
            print(f"–ë–æ—Ç: {user_info.get('bot', False)}")
            if 'bot_data' in user_info and user_info['bot_data']:
                bot_data = user_info['bot_data']
                print(f"Bot App ID: {bot_data.get('app_id', 'N/A')}")
            elif user_info.get('bot', False):
                print("Bot App ID: N/A")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª–Ω–æ–π –æ—Ç–ª–∞–¥–∫–æ–π
        messages = exporter.get_dialog_messages(dialog_id, limit=100, debug=True)
        
        if messages:
            print(f"–ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(messages)}")
            
            # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–æ–≤
            external_messages = []
            for msg in messages:
                text = msg.get('text', '')
                author_id = msg.get('author_id', 0)
                
                # –ù–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –≤–Ω–µ—à–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                if (text.strip() and 
                    author_id != 0 and  # –ù–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ
                    '[URL=' not in text and  # –ù–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    'bitrix24.ru' not in text and  # –ù–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å—Å—ã–ª–∫–∞
                    '–û—Ç–≤–µ—Ç–∏—Ç—å –≤' not in text and  # –ù–µ —à–∞–±–ª–æ–Ω
                    not text.startswith('–†–æ–ª—å:') and  # –ù–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø—Ä–æ–º–ø—Ç
                    '–Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∏–∑' not in text):  # –ù–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                    
                    external_messages.append(msg)
                    print(f"  ‚úÖ –í–Ω–µ—à–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {author_id}: {text[:100]}...")
            
            if external_messages:
                messenger_messages.extend(external_messages)
                print(f"  –ò—Ç–æ–≥–æ –≤–Ω–µ—à–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ: {len(external_messages)}")
        else:
            print("  –°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    
    print(f"\n=== –§–ò–ù–ê–õ–¨–ù–´–ï –ò–¢–û–ì–ò ===")
    print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –≤–Ω–µ—à–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messenger_messages)}")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∞–≤—Ç–æ—Ä–∞–º
    authors = {}
    for msg in messenger_messages:
        author_id = msg.get('author_id')
        if author_id not in authors:
            authors[author_id] = []
        authors[author_id].append(msg)
    
    print(f"–ê–≤—Ç–æ—Ä–æ–≤: {len(authors)}")
    for author_id, msgs in authors.items():
        print(f"  –ê–≤—Ç–æ—Ä {author_id}: {len(msgs)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        for msg in msgs[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2 —Å–æ–æ–±—â–µ–Ω–∏—è
            print(f"    - {msg.get('text', '')[:80]}...")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    result_data = {
        'total_external_messages': len(messenger_messages),
        'authors_count': len(authors),
        'messages_by_author': authors,
        'all_messages': messenger_messages
    }
    
    with open('messenger_messages.json', 'w', encoding='utf-8') as f:
        json.dump(result_data, f, ensure_ascii=False, indent=2)
    
    print(f"\n–í–Ω–µ—à–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: messenger_messages.json")

def extract_chat_links_and_try_access():
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Å—ã–ª–∫–∏ –Ω–∞ —á–∞—Ç—ã Wazzup –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–æ–ª—É—á–∏—Ç—å –∫ –Ω–∏–º –¥–æ—Å—Ç—É–ø"""
    WEBHOOK_URL = "https://b24-mwh5lj.bitrix24.ru/rest/1/vhbpg01ls83dn4rq/"
    
    print("=== –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –Ω–∞ —á–∞—Ç—ã Wazzup ===\n")
    
    exporter = Bitrix24ChatExporter(WEBHOOK_URL, disable_proxy=True, verify_ssl=True)
    
    if not exporter.test_connection():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏
    all_dialogs = exporter.get_all_dialogs(filter_messenger_only=False)
    
    chat_links = set()  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫
    contact_info = {}   # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö
    
    print("–ê–Ω–∞–ª–∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Wazzup...")
    
    for dialog in all_dialogs:
        dialog_id = dialog.get('id')
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –¥–∏–∞–ª–æ–≥–∞
        params = {'DIALOG_ID': dialog_id, 'LIMIT': 100}
        result = exporter.make_request('im.dialog.messages.get', params)
        
        if result and 'result' in result:
            messages = result['result'].get('messages', [])
            
            for msg in messages:
                text = msg.get('text', '')
                
                # –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ Wazzup —á–∞—Ç—ã –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö
                if 'integrations.wazzup24.com/bitrix/chat/' in text:
                    import re
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–µ
                    contact_pattern = r'\[URL=https://b24-mwh5lj\.bitrix24\.ru/crm/contact/details/(\d+)/\]([^[]+)\[/URL\]'
                    contact_matches = re.findall(contact_pattern, text)
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ (Telegram/WhatsApp)
                    platform_pattern = r'–°–¥–µ–ª–∫–∞ –ø–æ –æ–±—Ä–∞—â–µ–Ω–∏—é –≤ (Telegram|WhatsApp) \((\d+)\)'
                    platform_matches = re.findall(platform_pattern, text)
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç
                    chat_pattern = r'–û—Ç–≤–µ—Ç–∏—Ç—å –≤ \[URL=(https://integrations\.wazzup24\.com/bitrix/chat/[^[]+)\]—á–∞—Ç–µ\[/URL\]'
                    chat_matches = re.findall(chat_pattern, text)
                    
                    if contact_matches and platform_matches and chat_matches:
                        contact_id, contact_name = contact_matches[0]
                        platform, user_id = platform_matches[0]
                        chat_url = chat_matches[0]
                        
                        chat_links.add(chat_url)
                        
                        if contact_id not in contact_info:
                            contact_info[contact_id] = {
                                'name': contact_name,
                                'platform': platform,
                                'user_id': user_id,
                                'chat_url': chat_url,
                                'message_count': 0
                            }
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
                        count_pattern = r'(\d+) –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω'
                        count_matches = re.findall(count_pattern, text)
                        if count_matches:
                            contact_info[contact_id]['message_count'] = int(count_matches[0])
                        
                        print(f"üì± {platform}: {contact_name} (ID: {contact_id})")
                        print(f"   User ID: {user_id}")
                        print(f"   –°–æ–æ–±—â–µ–Ω–∏–π: {contact_info[contact_id]['message_count']}")
                        print(f"   –°—Å—ã–ª–∫–∞: {chat_url}")
                        print()
    
    print(f"\n=== –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===")
    print(f"–ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∞—Ç–æ–≤: {len(chat_links)}")
    print(f"–ö–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(contact_info)}")
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º
    platforms = {}
    for contact_id, info in contact_info.items():
        platform = info['platform']
        if platform not in platforms:
            platforms[platform] = []
        platforms[platform].append(info)
    
    for platform, contacts in platforms.items():
        print(f"\n{platform}: {len(contacts)} –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
        total_messages = sum(c['message_count'] for c in contacts)
        print(f"–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    export_data = {
        'total_chats': len(chat_links),
        'total_contacts': len(contact_info),
        'platforms': platforms,
        'contact_info': contact_info,
        'chat_links': list(chat_links)
    }
    
    with open('wazzup_chat_links.json', 'w', encoding='utf-8') as f:
        json.dump(export_data, f, ensure_ascii=False, indent=2)
    
    print(f"\n–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: wazzup_chat_links.json")
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç–∞–º (—ç—Ç–æ –º–æ–∂–µ—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
    print(f"\n=== –ü–û–ü–´–¢–ö–ê –î–û–°–¢–£–ü–ê –ö –ß–ê–¢–ê–ú ===")
    print("‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –¥–æ—Å—Ç—É–ø –∫ —á–∞—Ç–∞–º –º–æ–∂–µ—Ç —Ç—Ä–µ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Wazzup")
    
    chat_content = {}
    
    for i, chat_url in enumerate(list(chat_links)[:3], 1):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–µ 3
        print(f"\n{i}. –ü–æ–ø—ã—Ç–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫: {chat_url}")
        try:
            import requests
            headers = {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
            }
            response = requests.get(chat_url, timeout=30, headers=headers)
            print(f"   –°—Ç–∞—Ç—É—Å: {response.status_code}")
            
            if response.status_code == 200:
                content = response.text
                print(f"   –†–∞–∑–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                filename = f"chat_content_{i}.html"
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(content)
                print(f"   –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤: {filename}")
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                content_lower = content.lower()
                
                # –ò—â–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
                keywords = ['message', 'chat', 'telegram', 'whatsapp', '—Å–æ–æ–±—â–µ–Ω–∏–µ', '–¥–∏–∞–ª–æ–≥']
                found_keywords = [kw for kw in keywords if kw in content_lower]
                print(f"   –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {found_keywords}")
                
                # –ò—â–µ–º JavaScript API –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ
                if 'api' in content_lower and ('message' in content_lower or 'chat' in content_lower):
                    print("   ‚úÖ –í–æ–∑–º–æ–∂–Ω–æ, —Å–æ–¥–µ—Ä–∂–∏—Ç API –¥–ª—è —á–∞—Ç–∞")
                
                # –ò—â–µ–º —Ñ—Ä–µ–π–º—ã –∏–ª–∏ iframe
                if 'iframe' in content_lower:
                    print("   üì± –°–æ–¥–µ—Ä–∂–∏—Ç iframe")
                
                # –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ JSON
                import re
                json_patterns = re.findall(r'({[^{}]*"[^"]*"[^{}]*})', content)
                if json_patterns:
                    print(f"   üìã –ù–∞–π–¥–µ–Ω–æ JSON –æ–±—ä–µ–∫—Ç–æ–≤: {len(json_patterns)}")
                    
                    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ JSON –æ–±—ä–µ–∫—Ç–æ–≤
                    for j, json_str in enumerate(json_patterns[:3], 1):
                        if 'message' in json_str.lower() or 'text' in json_str.lower():
                            print(f"   üéØ JSON {j} –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {json_str[:100]}...")
                
                chat_content[chat_url] = {
                    'size': len(content),
                    'keywords': found_keywords,
                    'has_json': len(json_patterns),
                    'content_sample': content[:500] + '...' if len(content) > 500 else content
                }
                
            else:
                print(f"   ‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω (–∫–æ–¥: {response.status_code})")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —á–∞—Ç–æ–≤
    if chat_content:
        with open('chat_content_analysis.json', 'w', encoding='utf-8') as f:
            json.dump(chat_content, f, ensure_ascii=False, indent=2)
        print(f"\n–ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —á–∞—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: chat_content_analysis.json")
    
    return export_data

def get_messages_with_wazzup_api(wazzup_api_key: str):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Wazzup API —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π —Å Bitrix24"""
    WEBHOOK_URL = "https://b24-mwh5lj.bitrix24.ru/rest/1/vhbpg01ls83dn4rq/"
    
    print("=== –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Wazzup API ===\n")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç—ã
    wazzup_client = WazzupAPIClient(wazzup_api_key)
    bitrix_exporter = Bitrix24ChatExporter(WEBHOOK_URL, disable_proxy=True, verify_ssl=True)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    print("1. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...")
    wazzup_ok = wazzup_client.test_connection()
    bitrix_ok = bitrix_exporter.test_connection()
    
    if not wazzup_ok:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Wazzup API")
        return
    
    if not bitrix_ok:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Bitrix24 API")
        return
    
    print("\n2. –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Wazzup API...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã
    print("\nüì° –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤...")
    channels = wazzup_client.get_channels()
    print(f"–ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(channels) if isinstance(channels, list) else 'N/A'}")
    
    if channels:
        print("–ö–∞–Ω–∞–ª—ã:")
        for i, channel in enumerate(channels[:3] if isinstance(channels, list) else [channels], 1):
            if isinstance(channel, dict):
                name = channel.get('name', channel.get('title', 'N/A'))
                channel_type = channel.get('type', channel.get('platform', 'N/A'))
                print(f"  {i}. {name} ({channel_type})")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
    print("\nüë• –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤...")
    contacts = wazzup_client.get_contacts(limit=50)
    print(f"–ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {len(contacts) if isinstance(contacts, list) else 'N/A'}")
    
    if contacts:
        print("–ü–µ—Ä–≤—ã–µ 5 –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:")
        for i, contact in enumerate(contacts[:5] if isinstance(contacts, list) else [contacts], 1):
            if isinstance(contact, dict):
                name = contact.get('name', contact.get('chatName', contact.get('phone', 'N/A')))
                platform = contact.get('transport', contact.get('channel', 'N/A'))
                contact_id = contact.get('chatId', contact.get('id', 'N/A'))
                print(f"  {i}. {name} | {platform} | ID: {contact_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–¥–µ–ª–∫–∏
    print("\nüíº –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–¥–µ–ª–æ–∫...")
    deals = wazzup_client.get_deals(limit=20)
    print(f"–ù–∞–π–¥–µ–Ω–æ —Å–¥–µ–ª–æ–∫: {len(deals) if isinstance(deals, list) else 'N/A'}")
    
    if deals:
        print("–ü–µ—Ä–≤—ã–µ 3 —Å–¥–µ–ª–∫–∏:")
        for i, deal in enumerate(deals[:3] if isinstance(deals, list) else [deals], 1):
            if isinstance(deal, dict):
                name = deal.get('name', deal.get('title', 'N/A'))
                status = deal.get('status', deal.get('state', 'N/A'))
                contact_name = deal.get('contact', {}).get('name', 'N/A') if isinstance(deal.get('contact'), dict) else 'N/A'
                print(f"  {i}. {name} | –°—Ç–∞—Ç—É—Å: {status} | –ö–æ–Ω—Ç–∞–∫—Ç: {contact_name}")
    
    print("\n3. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ Bitrix24 –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π Bitrix24
    chat_links_data = extract_chat_links_and_try_access()
    bitrix_contacts = chat_links_data.get('contact_info', {}) if chat_links_data else {}
    
    print(f"\n–ù–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ Bitrix24 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è—Ö: {len(bitrix_contacts)}")
    
    # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–ø–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
    print("\n4. –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π...")
    
    all_messages = []
    successful_contacts = []
    
    if isinstance(contacts, list):
        for contact in contacts[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if not isinstance(contact, dict):
                continue
                
            contact_id = contact.get('chatId', contact.get('id', contact.get('contactId')))
            contact_name = contact.get('name', contact.get('chatName', contact.get('phone', 'Unknown')))
            
            if contact_id:
                print(f"\nüîç –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è: {contact_name} (ID: {contact_id})")
                messages = wazzup_client.get_messages_for_contact(str(contact_id))
                
                if messages:
                    print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(messages)}")
                    all_messages.extend(messages)
                    successful_contacts.append({
                        'id': contact_id,
                        'name': contact_name,
                        'messages_count': len(messages),
                        'contact_data': contact,
                        'messages': messages
                    })
                else:
                    print(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results = {
        'wazzup_data': {
            'channels': channels,
            'contacts': contacts,
            'deals': deals,
            'total_contacts': len(contacts) if isinstance(contacts, list) else 0,
            'total_channels': len(channels) if isinstance(channels, list) else 0,
            'total_deals': len(deals) if isinstance(deals, list) else 0
        },
        'bitrix_data': {
            'contact_info': bitrix_contacts,
            'total_bitrix_contacts': len(bitrix_contacts)
        },
        'messages': {
            'successful_contacts': successful_contacts,
            'total_messages': len(all_messages),
            'all_messages': all_messages
        },
        'summary': {
            'contacts_with_messages': len(successful_contacts),
            'total_messages_retrieved': len(all_messages),
            'export_timestamp': datetime.now().isoformat()
        }
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    output_file = 'wazzup_api_export.json'
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print(f"\n=== –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ ===")
    print(f"üìä –ö–∞–Ω–∞–ª–æ–≤ –≤ Wazzup: {results['wazzup_data']['total_channels']}")
    print(f"üë• –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ Wazzup: {results['wazzup_data']['total_contacts']}")
    print(f"üíº –°–¥–µ–ª–æ–∫ –≤ Wazzup: {results['wazzup_data']['total_deals']}")
    print(f"üì± –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤ –≤ Bitrix24: {results['bitrix_data']['total_bitrix_contacts']}")
    print(f"‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏: {results['summary']['contacts_with_messages']}")
    print(f"üí¨ –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {results['summary']['total_messages_retrieved']}")
    print(f"\nüìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_file}")
    
    return results

def main():
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    WEBHOOK_URL = "https://b24-mwh5lj.bitrix24.ru/rest/1/vhbpg01ls83dn4rq/"
    
    print("=== –≠–∫—Å–ø–æ—Ä—Ç –¥–∏–∞–ª–æ–≥–æ–≤ –ë–∏—Ç—Ä–∏–∫—Å24 ===\n")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫—Å–ø–æ—Ä—Ç–µ—Ä —Å –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–º –ø—Ä–æ–∫—Å–∏
    exporter = Bitrix24ChatExporter(
        WEBHOOK_URL, 
        disable_proxy=True,    # –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–∫—Å–∏
        verify_ssl=True        # –ú–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å False –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å SSL
    )
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    if not exporter.test_connection():
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API –ë–∏—Ç—Ä–∏–∫—Å24")
        print("\n–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("1. –ù–µ–≤–µ—Ä–Ω—ã–π URL –≤–µ–±—Ö—É–∫–∞")
        print("2. –í–µ–±-—Ö—É–∫ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω")
        print("3. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (–Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ 'im' –∏ 'user')")
        print("4. –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º")
        print("5. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–æ–º –∏–ª–∏ –∞–Ω—Ç–∏–≤–∏—Ä—É—Å–æ–º")
        print("\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:")
        print("- –ü—Ä–æ–≤–µ—Ä–∏—Ç—å URL –≤–µ–±—Ö—É–∫–∞")
        print("- –ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –≤–µ–±—Ö—É–∫ —Å –ø—Ä–∞–≤–∞–º–∏ 'im' –∏ 'user'")
        print("- –û—Ç–∫–ª—é—á–∏—Ç—å –∞–Ω—Ç–∏–≤–∏—Ä—É—Å/—Ñ–∞–π—Ä–≤–æ–ª –≤—Ä–µ–º–µ–Ω–Ω–æ")
        print("- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å verify_ssl=False –µ—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞–º–∏")
        return
    
    print("\n" + "="*50)
    
    # –≠–∫—Å–ø–æ—Ä—Ç –≤ JSON —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ (–ø–µ—Ä–≤—ã–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∂–¥–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞)
    exporter.export_all_dialogs(
        output_file='bitrix24_dialogs_full.json',
        include_messages=True,
        max_messages_per_dialog=100,
        messenger_only=True  # –¢–æ–ª—å–∫–æ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã
    )
    
    # –≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤ –≤ CSV
    exporter.export_to_csv('bitrix24_dialogs_list.csv', messenger_only=True)
    
    print("\n=== –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω ===")


def test_connection_only():
    """–§—É–Ω–∫—Ü–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    WEBHOOK_URL = "https://b24-mwh5lj.bitrix24.ru/rest/1/vhbpg01ls83dn4rq/"
    
    print("=== –¢–µ—Å—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –ë–∏—Ç—Ä–∏–∫—Å24 ===\n")
    
    # –¢–µ—Å—Ç —Å –ø—Ä–æ–∫—Å–∏
    print("1. –¢–µ—Å—Ç —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ø—Ä–æ–∫—Å–∏:")
    exporter1 = Bitrix24ChatExporter(WEBHOOK_URL, disable_proxy=False, verify_ssl=True)
    success1 = exporter1.test_connection()
    
    if not success1:
        print("\n2. –¢–µ—Å—Ç –±–µ–∑ –ø—Ä–æ–∫—Å–∏:")
        exporter2 = Bitrix24ChatExporter(WEBHOOK_URL, disable_proxy=True, verify_ssl=True)
        success2 = exporter2.test_connection()
        
        if not success2:
            print("\n3. –¢–µ—Å—Ç –±–µ–∑ –ø—Ä–æ–∫—Å–∏ –∏ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ SSL:")
            exporter3 = Bitrix24ChatExporter(WEBHOOK_URL, disable_proxy=True, verify_ssl=False)
            success3 = exporter3.test_connection()
            
            if success3:
                print("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: disable_proxy=True, verify_ssl=False")
            else:
                print("‚ùå –í—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏")
        else:
            print("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: disable_proxy=True, verify_ssl=True")
    else:
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")

if __name__ == "__main__":
    import sys
    
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω –∞—Ä–≥—É–º–µ–Ω—Ç "test", –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    if len(sys.argv) > 1 and sys.argv[1] == "test":
        test_connection_only()
    elif len(sys.argv) > 1 and sys.argv[1] == "debug":
        debug_single_dialog()
    elif len(sys.argv) > 1 and sys.argv[1] == "messenger":
        find_messenger_messages()
    elif len(sys.argv) > 1 and sys.argv[1] == "links":
        extract_chat_links_and_try_access()
    elif len(sys.argv) > 1 and sys.argv[1] == "wazzup":
        # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å Wazzup API —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–¥–∞—Ç—å API –∫–ª—é—á
        if len(sys.argv) > 2:
            api_key = sys.argv[2]
            get_messages_with_wazzup_api(api_key)
        else:
            print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ–¥–∞—Ç—å API –∫–ª—é—á Wazzup:")
            print("   python3 get-dialogs.py wazzup YOUR_API_KEY")
            print("\n–ì–¥–µ –ø–æ–ª—É—á–∏—Ç—å API –∫–ª—é—á:")
            print("1. –í–æ–π–¥–∏—Ç–µ –≤ –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç Wazzup24")
            print("2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí API")
            print("3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à API –∫–ª—é—á")
    else:
        main()